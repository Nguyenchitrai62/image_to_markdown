import json
import os
from PIL import Image, ImageDraw, ImageFont
from typing import Dict, List, Optional, Tuple
import textwrap

def wrap_text_to_fit_bbox(text: str, font, max_width: int, max_height: int) -> List[str]:
    """
    Chia text th√†nh nhi·ªÅu d√≤ng ƒë·ªÉ v·ª´a v·ªõi bbox
    
    Args:
        text: Text c·∫ßn chia
        font: Font object
        max_width: Chi·ªÅu r·ªông t·ªëi ƒëa
        max_height: Chi·ªÅu cao t·ªëi ƒëa
        
    Returns:
        List[str]: Danh s√°ch c√°c d√≤ng text
    """
    if not text.strip():
        return []
    
    # Th·ª≠ v·ªõi s·ªë t·ª´ kh√°c nhau tr√™n m·ªói d√≤ng
    words = text.split()
    if not words:
        return []
    
    # B·∫Øt ƒë·∫ßu v·ªõi 1 t·ª´ m·ªói d√≤ng v√† tƒÉng d·∫ßn
    best_lines = []
    
    for words_per_line in range(1, len(words) + 1):
        lines = []
        current_line = []
        
        for word in words:
            # Th·ª≠ th√™m t·ª´ v√†o d√≤ng hi·ªán t·∫°i
            test_line = current_line + [word]
            test_text = ' '.join(test_line)
            
            # Ki·ªÉm tra ƒë·ªô r·ªông c·ªßa d√≤ng
            bbox = font.getbbox(test_text)
            line_width = bbox[2] - bbox[0]
            
            if line_width <= max_width and len(test_line) <= words_per_line:
                current_line = test_line
            else:
                # D√≤ng hi·ªán t·∫°i ƒë√£ ƒë·∫ßy, chuy·ªÉn sang d√≤ng m·ªõi
                if current_line:
                    lines.append(' '.join(current_line))
                current_line = [word]
        
        # Th√™m d√≤ng cu·ªëi
        if current_line:
            lines.append(' '.join(current_line))
        
        # Ki·ªÉm tra chi·ªÅu cao t·ªïng
        line_height = font.getbbox('Ag')[3] - font.getbbox('Ag')[1]  # Chi·ªÅu cao 1 d√≤ng
        total_height = len(lines) * line_height * 1.2  # Th√™m kho·∫£ng c√°ch gi·ªØa c√°c d√≤ng
        
        if total_height <= max_height:
            best_lines = lines
        else:
            break  # Kh√¥ng c√≤n v·ª´a chi·ªÅu cao
    
    return best_lines

def get_optimal_font_size_with_wrapping(text: str, bbox_width: int, bbox_height: int, 
                                      font_path: str, min_size: int = 8, max_size: int = 60) -> Tuple[int, List[str]]:
    """
    T√¨m font size t·ªëi ∆∞u v√† chia text th√†nh c√°c d√≤ng v·ª´a v·ªõi bbox
    
    Args:
        text: Text c·∫ßn v·∫Ω
        bbox_width: Chi·ªÅu r·ªông bbox
        bbox_height: Chi·ªÅu cao bbox
        font_path: ƒê∆∞·ªùng d·∫´n font
        min_size: Font size t·ªëi thi·ªÉu
        max_size: Font size t·ªëi ƒëa
        
    Returns:
        Tuple[int, List[str]]: (font_size, list_of_lines)
    """
    if not text.strip():
        return min_size, []
    
    # ƒê·ªÉ l·∫°i margin 10%
    margin_width = bbox_width * 0.1
    margin_height = bbox_height * 0.1
    effective_width = bbox_width - margin_width
    effective_height = bbox_height - margin_height
    
    # Binary search ƒë·ªÉ t√¨m font size t·ªëi ∆∞u
    best_size = min_size
    best_lines = [text]  # Fallback
    
    for font_size in range(max_size, min_size - 1, -1):  # Th·ª≠ t·ª´ l·ªõn xu·ªëng nh·ªè
        try:
            font = ImageFont.truetype(font_path, font_size)
            
            # Th·ª≠ chia text th√†nh c√°c d√≤ng
            lines = wrap_text_to_fit_bbox(text, font, effective_width, effective_height)
            
            if lines:  # N·∫øu c√≥ th·ªÉ chia th√†nh c√¥ng
                # Ki·ªÉm tra l·∫°i chi·ªÅu cao t·ªïng
                line_height = font.getbbox('Ag')[3] - font.getbbox('Ag')[1]
                total_height = len(lines) * line_height * 1.2
                
                if total_height <= effective_height:
                    best_size = font_size
                    best_lines = lines
                    break  # ƒê√£ t√¨m ƒë∆∞·ª£c font size t·ªët nh·∫•t
                    
        except Exception:
            continue
    
    return best_size, best_lines

def convert_bbox_format(bbox):
    """
    Chuy·ªÉn ƒë·ªïi bbox v·ªÅ format [x_min, y_min, x_max, y_max]
    """
    try:
        if isinstance(bbox, list) and len(bbox) == 4:
            if isinstance(bbox[0], list):
                # Format: [[x1,y1], [x2,y2], [x3,y3], [x4,y4]]
                x_coords = [point[0] for point in bbox]
                y_coords = [point[1] for point in bbox]
                result = [min(x_coords), min(y_coords), max(x_coords), max(y_coords)]
            else:
                # Format: [x1, y1, x2, y2]
                result = bbox
        else:
            # Fallback
            result = [0, 0, 100, 100]
        
        # ƒê·∫£m b·∫£o t·∫•t c·∫£ gi√° tr·ªã l√† integers v√† >= 0
        result = [max(0, int(x)) for x in result]
        return result
        
    except Exception:
        return [0, 0, 100, 100]

def draw_multiline_text(draw, lines: List[str], font, x: int, y: int, 
                       text_color: str, line_spacing: float = 1.2):
    """
    V·∫Ω text nhi·ªÅu d√≤ng
    
    Args:
        draw: ImageDraw object
        lines: Danh s√°ch c√°c d√≤ng text
        font: Font object
        x, y: V·ªã tr√≠ b·∫Øt ƒë·∫ßu
        text_color: M√†u text
        line_spacing: Kho·∫£ng c√°ch gi·ªØa c√°c d√≤ng (h·ªá s·ªë)
    """
    if not lines:
        return
    
    line_height = font.getbbox('Ag')[3] - font.getbbox('Ag')[1]
    actual_line_spacing = line_height * line_spacing
    
    for i, line in enumerate(lines):
        line_y = y + i * actual_line_spacing
        draw.text((x, line_y), line, fill=text_color, font=font)

def draw_text_on_image_from_json(image_path, json_path, 
                                font_path="C:/Windows/Fonts/times.ttf",
                                output_path=None,
                                draw_bbox_outline=True,
                                bbox_color_merged="red",  # ƒê·ªè cho merged box
                                bbox_color_single="blue",  # Xanh cho single box
                                bbox_thickness=2,
                                text_color="black",  # ƒêen
                                bg_color="white"):  # Tr·∫Øng
    """
    V·∫Ω text ƒë√£ d·ªãch l√™n ·∫£nh g·ªëc d·ª±a v√†o JSON v·ªõi h·ªó tr·ª£ xu·ªëng d√≤ng
    
    Args:
        image_path: ƒê∆∞·ªùng d·∫´n ·∫£nh g·ªëc
        json_path: ƒê∆∞·ªùng d·∫´n file JSON ch·ª©a k·∫øt qu·∫£ OCR v√† d·ªãch
        font_path: ƒê∆∞·ªùng d·∫´n font
        output_path: ƒê∆∞·ªùng d·∫´n l∆∞u ·∫£nh k·∫øt qu·∫£ (None = t·ª± ƒë·ªông)
        draw_bbox_outline: C√≥ v·∫Ω vi·ªÅn bbox kh√¥ng
        bbox_color_merged: M√†u vi·ªÅn cho merged box (t√™n m√†u ho·∫∑c hex)
        bbox_color_single: M√†u vi·ªÅn cho single box (t√™n m√†u ho·∫∑c hex)
        bbox_thickness: ƒê·ªô d√†y vi·ªÅn
        text_color: M√†u text (t√™n m√†u ho·∫∑c hex)
        bg_color: M√†u n·ªÅn c·ªßa bbox (t√™n m√†u ho·∫∑c hex)
        
    Returns:
        str: ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë√£ v·∫Ω text
    """
    # Ki·ªÉm tra file t·ªìn t·∫°i
    if not os.path.exists(image_path):
        raise FileNotFoundError(f"·∫¢nh kh√¥ng t·ªìn t·∫°i: {image_path}")
    
    if not os.path.exists(json_path):
        raise FileNotFoundError(f"JSON kh√¥ng t·ªìn t·∫°i: {json_path}")
    
    # Load JSON data
    print(f"üìñ ƒêang ƒë·ªçc JSON: {json_path}")
    with open(json_path, 'r', encoding='utf-8') as f:
        json_data = json.load(f)
    
    # Load ·∫£nh g·ªëc
    print(f"üñºÔ∏è ƒêang load ·∫£nh: {image_path}")
    original_image = Image.open(image_path)
    img_with_text = original_image.copy()
    draw = ImageDraw.Draw(img_with_text)
    
    # Ki·ªÉm tra font
    font_available = os.path.exists(font_path) if font_path else False
    if not font_available:
        print(f"‚ö†Ô∏è Font kh√¥ng t·ªìn t·∫°i: {font_path}")
        print("S·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh")
    
    # V·∫Ω text cho t·ª´ng bbox
    text_infos = json_data.get('texts', [])
    print(f"üé® ƒêang v·∫Ω {len(text_infos)} text boxes v·ªõi h·ªó tr·ª£ xu·ªëng d√≤ng...")
    
    success_count = 0
    error_count = 0
    
    for i, text_info in enumerate(text_infos):
        try:
            bbox = text_info.get('bbox', [])
            translated_text = text_info.get('translated_text', text_info.get('original_text', ''))
            is_merged = text_info.get('is_merged', False)
            
            if not translated_text.strip():
                continue
            
            # Convert bbox v·ªÅ format chu·∫©n
            x_min, y_min, x_max, y_max = convert_bbox_format(bbox)
            
            # T√≠nh k√≠ch th∆∞·ªõc bbox
            bbox_width = x_max - x_min
            bbox_height = y_max - y_min
            
            if bbox_width <= 0 or bbox_height <= 0:
                print(f"‚ö†Ô∏è Bbox {i} c√≥ k√≠ch th∆∞·ªõc kh√¥ng h·ª£p l·ªá: {bbox}")
                continue
            
            # V·∫Ω n·ªÅn tr·∫Øng cho bbox
            draw.rectangle([x_min, y_min, x_max, y_max], fill=bg_color, outline=None)
            
            # T√≠nh font size t·ªëi ∆∞u v√† chia text th√†nh d√≤ng
            if font_available:
                optimal_font_size, text_lines = get_optimal_font_size_with_wrapping(
                    translated_text, bbox_width, bbox_height, font_path
                )
                font = ImageFont.truetype(font_path, optimal_font_size)
            else:
                # S·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh v√† chia text ƒë∆°n gi·∫£n
                try:
                    font = ImageFont.load_default()
                    # Chia text ƒë∆°n gi·∫£n theo chi·ªÅu r·ªông
                    estimated_chars_per_line = max(1, bbox_width // 8)  # ∆Ø·ªõc t√≠nh
                    text_lines = textwrap.wrap(translated_text, width=estimated_chars_per_line)
                    if not text_lines:
                        text_lines = [translated_text]
                except:
                    print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ load font cho text {i}")
                    continue
            
            if not text_lines:
                continue
            
            # T√≠nh to√°n v·ªã tr√≠ ƒë·ªÉ center text block
            line_height = font.getbbox('Ag')[3] - font.getbbox('Ag')[1]
            total_text_height = len(text_lines) * line_height * 1.2
            
            # CƒÉn gi·ªØa theo chi·ªÅu d·ªçc
            start_y = y_min + max(0, (bbox_height - total_text_height) // 2)
            
            # V·∫Ω t·ª´ng d√≤ng text
            for line_idx, line in enumerate(text_lines):
                if not line.strip():
                    continue
                
                # T√≠nh v·ªã tr√≠ x ƒë·ªÉ cƒÉn gi·ªØa d√≤ng
                line_bbox = font.getbbox(line)
                line_width = line_bbox[2] - line_bbox[0]
                line_x = x_min + max(0, (bbox_width - line_width) // 2)
                
                # ƒê·∫£m b·∫£o text kh√¥ng v∆∞·ª£t ra ngo√†i bbox
                line_x = max(x_min + 5, min(line_x, x_max - line_width - 5))  # Margin 5px
                line_y = start_y + line_idx * line_height * 1.2
                
                # Ki·ªÉm tra kh√¥ng v∆∞·ª£t qu√° bbox
                if line_y + line_height <= y_max - 5:  # Margin bottom 5px
                    draw.text((line_x, line_y), line, fill=text_color, font=font)
            
            # V·∫Ω vi·ªÅn bbox n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
            if draw_bbox_outline:
                outline_color = bbox_color_merged if is_merged else bbox_color_single
                draw.rectangle([x_min, y_min, x_max, y_max], 
                             outline=outline_color, width=bbox_thickness)
            
            success_count += 1
            
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói v·∫Ω text {i}: {str(e)}")
            error_count += 1
            continue
    
    print(f"‚úÖ Ho√†n th√†nh v·∫Ω text v·ªõi xu·ªëng d√≤ng: {success_count} th√†nh c√¥ng, {error_count} l·ªói")
    
    # T·∫°o ƒë∆∞·ªùng d·∫´n output
    if output_path is None:
        base_name = os.path.splitext(os.path.basename(image_path))[0]
        output_dir = "./output"
        os.makedirs(output_dir, exist_ok=True)
        output_path = os.path.join(output_dir, f"{base_name}_translated.jpg")
    
    # L∆∞u ·∫£nh
    img_with_text.save(output_path, quality=95)
    print(f"üíæ ƒê√£ l∆∞u ·∫£nh v√†o: {output_path}")
    
    return output_path

def batch_draw_from_json_folder(json_folder, images_folder=None, 
                               font_path="C:/Windows/Fonts/times.ttf",
                               output_folder="./output"):
    """
    V·∫Ω text h√†ng lo·∫°t t·ª´ c√°c file JSON trong folder
    
    Args:
        json_folder: Folder ch·ª©a c√°c file JSON
        images_folder: Folder ch·ª©a ·∫£nh g·ªëc (None = t·ª± ƒë·ªông t√¨m t·ª´ JSON)
        font_path: ƒê∆∞·ªùng d·∫´n font
        output_folder: Folder l∆∞u k·∫øt qu·∫£
        
    Returns:
        dict: Th·ªëng k√™ k·∫øt qu·∫£
    """
    if not os.path.exists(json_folder):
        raise FileNotFoundError(f"Folder JSON kh√¥ng t·ªìn t·∫°i: {json_folder}")
    
    # T√¨m t·∫•t c·∫£ file JSON
    json_files = [f for f in os.listdir(json_folder) if f.endswith('.json')]
    
    if not json_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file JSON n√†o trong {json_folder}")
        return {'success': 0, 'failed': 0, 'details': []}
    
    print(f"üìÅ T√¨m th·∫•y {len(json_files)} file JSON")
    
    os.makedirs(output_folder, exist_ok=True)
    
    results = {'success': 0, 'failed': 0, 'details': []}
    
    for i, json_file in enumerate(json_files):
        try:
            print(f"\nüìÑ X·ª≠ l√Ω {i+1}/{len(json_files)}: {json_file}")
            
            json_path = os.path.join(json_folder, json_file)
            
            # ƒê·ªçc JSON ƒë·ªÉ t√¨m ƒë∆∞·ªùng d·∫´n ·∫£nh
            with open(json_path, 'r', encoding='utf-8') as f:
                json_data = json.load(f)
            
            # T√¨m ·∫£nh g·ªëc
            if images_folder:
                # T√¨m trong folder ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
                base_name = os.path.splitext(json_file)[0].replace('_translated_ocr_result', '')
                possible_extensions = ['.jpg', '.jpeg', '.png', '.bmp']
                image_path = None
                
                for ext in possible_extensions:
                    test_path = os.path.join(images_folder, base_name + ext)
                    if os.path.exists(test_path):
                        image_path = test_path
                        break
                
                if not image_path:
                    print(f"‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh g·ªëc cho {json_file}")
                    results['failed'] += 1
                    results['details'].append({'file': json_file, 'status': 'failed', 'error': 'Image not found'})
                    continue
            else:
                # L·∫•y t·ª´ metadata trong JSON
                image_path = json_data.get('metadata', {}).get('image_path')
                if not image_path or not os.path.exists(image_path):
                    print(f"‚ùå ƒê∆∞·ªùng d·∫´n ·∫£nh kh√¥ng h·ª£p l·ªá trong {json_file}")
                    results['failed'] += 1
                    results['details'].append({'file': json_file, 'status': 'failed', 'error': 'Invalid image path'})
                    continue
            
            # T·∫°o output path
            output_name = f"{os.path.splitext(os.path.basename(image_path))[0]}_translated.jpg"
            output_path = os.path.join(output_folder, output_name)
            
            # V·∫Ω text
            draw_text_on_image_from_json(
                image_path=image_path,
                json_path=json_path,
                font_path=font_path,
                output_path=output_path,
                draw_bbox_outline=True
            )
            
            results['success'] += 1
            results['details'].append({
                'file': json_file, 
                'status': 'success', 
                'output': output_path,
                'image_source': image_path
            })
            
        except Exception as e:
            print(f"‚ùå L·ªói x·ª≠ l√Ω {json_file}: {str(e)}")
            results['failed'] += 1
            results['details'].append({'file': json_file, 'status': 'failed', 'error': str(e)})
    
    print(f"\nüìä K·∫øt qu·∫£ batch draw:")
    print(f"‚úÖ Th√†nh c√¥ng: {results['success']}")
    print(f"‚ùå Th·∫•t b·∫°i: {results['failed']}")
    print(f"üìÅ T·∫•t c·∫£ output trong: {output_folder}")
    
    return results

def quick_draw_from_json(json_path, image_path=None, font_path="C:/Windows/Fonts/times.ttf"):
    """
    H√†m nhanh ƒë·ªÉ v·∫Ω text t·ª´ JSON v·ªõi tham s·ªë t·ªëi thi·ªÉu
    
    Args:
        json_path: ƒê∆∞·ªùng d·∫´n file JSON
        image_path: ƒê∆∞·ªùng d·∫´n ·∫£nh g·ªëc (None = l·∫•y t·ª´ JSON)
        font_path: ƒê∆∞·ªùng d·∫´n font
        
    Returns:
        str: ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë√£ v·∫Ω text
    """
    if not os.path.exists(json_path):
        raise FileNotFoundError(f"JSON kh√¥ng t·ªìn t·∫°i: {json_path}")
    
    # L·∫•y image_path t·ª´ JSON n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
    if not image_path:
        with open(json_path, 'r', encoding='utf-8') as f:
            json_data = json.load(f)
        image_path = json_data.get('metadata', {}).get('image_path')
        
        if not image_path:
            raise ValueError("Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh trong JSON v√† kh√¥ng ƒë∆∞·ª£c cung c·∫•p")
    
    print(f"üöÄ V·∫Ω text nhanh t·ª´ JSON v·ªõi h·ªó tr·ª£ xu·ªëng d√≤ng")
    
    output_path = draw_text_on_image_from_json(
        image_path=image_path,
        json_path=json_path,
        font_path=font_path,
        draw_bbox_outline=False  # Kh√¥ng v·∫Ω vi·ªÅn ƒë·ªÉ clean h∆°n
    )
    
    print(f"‚úÖ Ho√†n th√†nh! ·∫¢nh ƒë√£ v·∫Ω text: {output_path}")
    return output_path

def preview_json_content(json_path, max_texts=5):
    """
    Xem tr∆∞·ªõc n·ªôi dung JSON ƒë·ªÉ ki·ªÉm tra
    
    Args:
        json_path: ƒê∆∞·ªùng d·∫´n file JSON
        max_texts: S·ªë text t·ªëi ƒëa ƒë·ªÉ hi·ªÉn th·ªã
    """
    if not os.path.exists(json_path):
        print(f"‚ùå JSON kh√¥ng t·ªìn t·∫°i: {json_path}")
        return
    
    with open(json_path, 'r', encoding='utf-8') as f:
        json_data = json.load(f)
    
    metadata = json_data.get('metadata', {})
    texts = json_data.get('texts', [])
    
    print(f"üìñ Xem tr∆∞·ªõc JSON: {json_path}")
    print(f"üìä Metadata:")
    print(f"  - ·∫¢nh g·ªëc: {metadata.get('image_path', 'N/A')}")
    print(f"  - T·ªïng box: {metadata.get('total_final_boxes', 0)}")
    print(f"  - Ng√¥n ng·ªØ: {metadata.get('source_language', 'N/A')} ‚Üí {metadata.get('target_language', 'N/A')}")
    print(f"  - Th·ªùi gian x·ª≠ l√Ω: {metadata.get('processing_timestamp', 'N/A')}")
    
    print(f"\nüìù Text samples (hi·ªÉn th·ªã {min(max_texts, len(texts))} ƒë·∫ßu ti√™n):")
    for i, text_info in enumerate(texts[:max_texts]):
        print(f"{i+1}. G·ªëc: '{text_info.get('original_text', '')}'")
        print(f"   D·ªãch: '{text_info.get('translated_text', '')}'")
        print(f"   Merged: {text_info.get('is_merged', False)}")
        print()

# Test function
def test_draw_from_json():
    """Test function v·∫Ω text t·ª´ JSON"""
    json_path = "./output/translated_ja_to_vi.json"
    image_path = "./cropped_boxes/Chap189-Page011.jpg"  # ƒê∆∞·ªùng d·∫´n ·∫£nh g·ªëc
    
    if os.path.exists(json_path):
        print("=== TEST DRAW TEXT FROM JSON WITH WORD WRAPPING ===")
        
        # Xem tr∆∞·ªõc JSON
        preview_json_content(json_path)
        
        # V·∫Ω text l√™n ·∫£nh
        print("\nüé® V·∫Ω text l√™n ·∫£nh v·ªõi h·ªó tr·ª£ xu·ªëng d√≤ng...")
        output_path = draw_text_on_image_from_json(
            image_path=image_path,
            json_path=json_path,
            font_path="C:/Windows/Fonts/times.ttf",
            draw_bbox_outline=True,
            bbox_color_merged="red",  # ƒê·ªè cho merged box
            bbox_color_single="blue",  # Xanh cho single box
        )
        
        print(f"‚úÖ Ho√†n th√†nh! ·∫¢nh ƒë√£ v·∫Ω text: {output_path}")
        
    else:
        print(f"‚ùå JSON kh√¥ng t·ªìn t·∫°i: {json_path}")
        print("Ch·∫°y ph·∫ßn OCR tr∆∞·ªõc ƒë·ªÉ t·∫°o JSON")

if __name__ == "__main__":
    # Ch·∫°y test
    test_draw_from_json()